package net.sf.cinnamon.illicium

import eu.hornerproject.humulus.IgnorableException
import server.Acl
import server.User

/**
 * Created by IntelliJ IDEA.
 * User: ingo
 * Date: 18.07.11
 * Time: 18:34
 * To change this template use File | Settings | File Templates.
 */
class BaseController {

    def springSecurityService
    def repositoryService
    def userService
    def folderService
    def inputValidationService

    protected Set<String> loadUserPermissions(Acl acl){
        Set<String> permissions
        try {
            log.debug("us: ${userService.user} acl: ${acl} repo: ${session.repositoryName}")
            permissions = repositoryService.getUserPermissions(userService.user, acl, session.repositoryName)
//            log.debug("found permissions: ${permissions.dump()}")
        } catch (RuntimeException ex) {
            log.debug("getUserPermissions failed",ex)
            render(status:503, text:message(code:'error.access.failed'))
            throw new IgnorableException("error.access.failed")
        }
        return permissions
    }

     /**
     * Tries to update an object or folder by calling the CinnamonServer API through the
     * repositoryService. If access to this object or folder is denied or just fails,
     * an error message is rendered to the AJAX client and an IgnorableException
     * is thrown.
     * @param closure which accepts a username string as its only parameter and
      * calls repositoryService.updateFolder with one of the following field parameters:
     * <ul>
     * <li>aclid</li>
     * <li>typeid</li>
     * <li>name</li>
     * <li>ownerid</li>
     * </ul>
     * or it calls repositoryService.updateOsd with one of the following:
     * <ul>
     *     <li>name</li>
     *     <li>owner</li>
     *     <li>acl_id</li>
     *     <li>objtype</li>
     *     <li>language_id</li>
     * </ul>
     *
     * For more information, see CmdInterpreter.updateFolder's JavaDoc and CmdInterpreter.setSysMeta.
     */
    protected void tryUpdate(Closure doUpdate) {
        User user = userService.user
        try {
            doUpdate(user.name)
        } catch (RuntimeException ex) {
            if (ex.message.contains('error.permission.missing')) {
                render(status: 401, text: message(code: 'error.access.denied'))
                throw new IgnorableException("error.access.denied")
            }
            else {
                log.debug("failed to save object", ex)
                render(status: 503, text: message(code: "error.save.object", args:[message(code:ex.message)]))
                throw new IgnorableException("error.save.object")
            }
        }
    }

    protected void renderException(Exception e){
        render(status:500, text:message(code:e.getMessage()))
    }

    /**
     * Filter the error messages generated by the Cinnamon server.
     * Those messages are XML documents which contain a message element we need.
     */
    protected String filterErrorMessage(String msg) {
        if (msg.startsWith("<?xml ")) {
            try {
                def xml = new XmlSlurper().parseText(msg)
                return xml.message.text()
            }
            catch (Exception e) {
                return msg
            }
        }
        return msg
    }
}
